name: Create Release on success PR

on:
  pull_request:
    types: [merged]
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(latestRelease.data.tag_name);

      - name: Get commits since last release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const commits = github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: latestRelease.data.published_at,
            });
            const commitMessages = commits.data.map(commit => commit.commit.message);
            console.log(commitMessages);

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequest = github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.pullRequest.number,
            });
            const version = `0.${context.pullRequest.number}`;
            const releaseNotes = github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: github.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              }).data.published_at,
            }).data.map(commit => commit.commit.message).join('\n');
            github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: version,
              body: releaseNotes,
            });

