name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get last PR number and title
        run: |
          LAST_PR_NUMBER=$(git log --format=%s --grep='Merge pull request' | head -1 | cut -d' ' -f4 | cut -d'/' -f2 | sed 's/#//g')
          LAST_PR_TITLE=$(git log --format=%s --grep='Merge pull request' | head -1)
          echo "LAST_PR_NUMBER=$LAST_PR_NUMBER" >> $GITHUB_ENV
          echo "LAST_PR_TITLE=$LAST_PR_TITLE" >> $GITHUB_ENV
      - name: Get commit number after last release
        run: |
          COMMIT_NUMBER_AFTER_LAST_RELEASE=$(git rev-list --count HEAD)
          echo "COMMIT_NUMBER_AFTER_LAST_RELEASE=$COMMIT_NUMBER_AFTER_LAST_RELEASE" >> $GITHUB_ENV
      - name: Set variables
        run: |
          RELEASE_TAG="0.${LAST_PR_NUMBER}.${COMMIT_NUMBER_AFTER_LAST_RELEASE}-1"
          RELEASE_NAME="Release ${RELEASE_TAG}"
          RELEASE_BODY="${LAST_PR_TITLE}"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(latestRelease.data.tag_name);

      - name: Get commits since last release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const commits = github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: latestRelease.data.published_at,
            });
            const commitMessages = commits.data.map(commit => commit.commit.message);
            console.log(commitMessages);

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequest = github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.pullRequest.number,
            });
            const version = `0.${context.pullRequest.number}`;
            const releaseNotes = github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: github.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              }).data.published_at,
            }).data.map(commit => commit.commit.message).join('\n');
            github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: version,
              body: releaseNotes,
            });
      - name: Build app
        run: |
          make build
      - name: Archive data
        run: |
          zip -r release.zip *.app

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

